/* tslint:disable */
/* eslint-disable */
/*
Visier Profile Management APIs

Visier APIs for managing the profiles assigned to users

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessibleTenantProfileAssignmentRequestDTO } from '../models';
// @ts-ignore
import { AccessibleTenantProfileAssignmentResponseDTO } from '../models';
// @ts-ignore
import { AccessibleTenantProfileRevokeRequestDTO } from '../models';
// @ts-ignore
import { AccessibleTenantProfileRevokeResponseDTO } from '../models';
// @ts-ignore
import { AllProfileAssignedForAccessibleTenantDTO } from '../models';
// @ts-ignore
import { AllProfileAssignedForLocalTenantDTO } from '../models';
// @ts-ignore
import { LocalTenantProfileAssignmentRequestDTO } from '../models';
// @ts-ignore
import { LocalTenantProfileAssignmentResponseDTO } from '../models';
// @ts-ignore
import { LocalTenantProfileRevokeRequestDTO } from '../models';
// @ts-ignore
import { LocalTenantProfileRevokeResponseDTO } from '../models';
// @ts-ignore
import { ProfileGetAPIResponseDTO } from '../models';
// @ts-ignore
import { ProfilesGetAPIResponseDTO } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TargetTenantCodeDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProfileManagementApi - axios parameter creator
 * @export
 */
export const ProfileManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \"less than\" the current time (that is, in the past).
         * @summary Assign an analytic tenant profile to administrating tenant users
         * @param {string} profileId The ID of the profile to assign.
         * @param {AccessibleTenantProfileAssignmentRequestDTO} accessibleTenantProfileAssignmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAnalyticProfile: async (profileId: string, accessibleTenantProfileAssignmentRequestDTO: AccessibleTenantProfileAssignmentRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('assignAnalyticProfile', 'profileId', profileId)
            // verify required parameter 'accessibleTenantProfileAssignmentRequestDTO' is not null or undefined
            assertParamExists('assignAnalyticProfile', 'accessibleTenantProfileAssignmentRequestDTO', accessibleTenantProfileAssignmentRequestDTO)
            const localVarPath = `/v1/admin/profiles/accessible-tenants/{profileId}/assign`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accessibleTenantProfileAssignmentRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/accessible-tenants/{profileId}/assign',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accessibleTenantProfileAssignmentRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
         * @summary Assign a profile to a list of users
         * @param {string} profileId The ID of the profile to assign to a list of users.
         * @param {LocalTenantProfileAssignmentRequestDTO} localTenantProfileAssignmentRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignProfile: async (profileId: string, localTenantProfileAssignmentRequestDTO: LocalTenantProfileAssignmentRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('assignProfile', 'profileId', profileId)
            // verify required parameter 'localTenantProfileAssignmentRequestDTO' is not null or undefined
            assertParamExists('assignProfile', 'localTenantProfileAssignmentRequestDTO', localTenantProfileAssignmentRequestDTO)
            const localVarPath = `/v1/admin/profiles/{profileId}/assign`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: localTenantProfileAssignmentRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/{profileId}/assign',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(localTenantProfileAssignmentRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
         * @summary Retrieve a list of all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProfiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
         * @summary Retrieve the details of an analytic tenant profile
         * @param {string} profileId The ID of the profile to retrieve details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticProfileDetail: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('getAnalyticProfileDetail', 'profileId', profileId)
            const localVarPath = `/v1/admin/profiles/accessible-tenants/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/accessible-tenants/{profileId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve a list of analytic tenant profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticProfiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/profiles/accessible-tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/accessible-tenants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve an administrating tenant user\'s analytic tenant profiles
         * @param {string} userId The ID of the user you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticUserProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAnalyticUserProfile', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}/accessible-tenant-profiles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}/accessible-tenant-profiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
         * @summary Retrieve the details of a profile
         * @param {string} profileId The ID of the profile to retrieve details for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileDetail: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('getProfileDetail', 'profileId', profileId)
            const localVarPath = `/v1/admin/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/{profileId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles. For administrating tenants,  this retrieves a user\'s administrating tenant profiles.
         * @summary Retrieve a user\'s profiles
         * @param {string} userId The ID of the user you want to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserProfile', 'userId', userId)
            const localVarPath = `/v1/admin/users/{userId}/profiles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/users/{userId}/profiles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
         * @summary Remove an analytic tenant profile from administrating tenant users
         * @param {string} profileId The ID of the profile to remove.
         * @param {AccessibleTenantProfileRevokeRequestDTO} accessibleTenantProfileRevokeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnalyticProfile: async (profileId: string, accessibleTenantProfileRevokeRequestDTO: AccessibleTenantProfileRevokeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('removeAnalyticProfile', 'profileId', profileId)
            // verify required parameter 'accessibleTenantProfileRevokeRequestDTO' is not null or undefined
            assertParamExists('removeAnalyticProfile', 'accessibleTenantProfileRevokeRequestDTO', accessibleTenantProfileRevokeRequestDTO)
            const localVarPath = `/v1/admin/profiles/accessible-tenants/{profileId}/remove`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accessibleTenantProfileRevokeRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/accessible-tenants/{profileId}/remove',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accessibleTenantProfileRevokeRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
         * @summary Remove a profile from a list of users
         * @param {string} profileId The ID of the profile to remove to a list of users.
         * @param {LocalTenantProfileRevokeRequestDTO} localTenantProfileRevokeRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProfile: async (profileId: string, localTenantProfileRevokeRequestDTO: LocalTenantProfileRevokeRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('removeProfile', 'profileId', profileId)
            // verify required parameter 'localTenantProfileRevokeRequestDTO' is not null or undefined
            assertParamExists('removeProfile', 'localTenantProfileRevokeRequestDTO', localTenantProfileRevokeRequestDTO)
            const localVarPath = `/v1/admin/profiles/{profileId}/remove`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId !== undefined ? profileId : `-profileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: localTenantProfileRevokeRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/profiles/{profileId}/remove',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(localTenantProfileRevokeRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileManagementApi - functional programming interface
 * @export
 */
export const ProfileManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \"less than\" the current time (that is, in the past).
         * @summary Assign an analytic tenant profile to administrating tenant users
         * @param {ProfileManagementApiAssignAnalyticProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAnalyticProfile(requestParameters: ProfileManagementApiAssignAnalyticProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessibleTenantProfileAssignmentResponseDTO>> {
            const accessibleTenantProfileAssignmentRequestDTO: AccessibleTenantProfileAssignmentRequestDTO = {
                targetUserIds: requestParameters.targetUserIds,
                targetTenantCodes: requestParameters.targetTenantCodes,
                validityStartTime: requestParameters.validityStartTime,
                validityEndTime: requestParameters.validityEndTime
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAnalyticProfile(requestParameters.profileId, accessibleTenantProfileAssignmentRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
         * @summary Assign a profile to a list of users
         * @param {ProfileManagementApiAssignProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignProfile(requestParameters: ProfileManagementApiAssignProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalTenantProfileAssignmentResponseDTO>> {
            const localTenantProfileAssignmentRequestDTO: LocalTenantProfileAssignmentRequestDTO = {
                targetUserIds: requestParameters.targetUserIds,
                validityStartTime: requestParameters.validityStartTime,
                validityEndTime: requestParameters.validityEndTime
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignProfile(requestParameters.profileId, localTenantProfileAssignmentRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
         * @summary Retrieve a list of all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProfiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfilesGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProfiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
         * @summary Retrieve the details of an analytic tenant profile
         * @param {ProfileManagementApiGetAnalyticProfileDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalyticProfileDetail(requestParameters: ProfileManagementApiGetAnalyticProfileDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalyticProfileDetail(requestParameters.profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve a list of analytic tenant profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalyticProfiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfilesGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalyticProfiles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve an administrating tenant user\'s analytic tenant profiles
         * @param {ProfileManagementApiGetAnalyticUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalyticUserProfile(requestParameters: ProfileManagementApiGetAnalyticUserProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllProfileAssignedForAccessibleTenantDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalyticUserProfile(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
         * @summary Retrieve the details of a profile
         * @param {ProfileManagementApiGetProfileDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileDetail(requestParameters: ProfileManagementApiGetProfileDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileGetAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileDetail(requestParameters.profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles. For administrating tenants,  this retrieves a user\'s administrating tenant profiles.
         * @summary Retrieve a user\'s profiles
         * @param {ProfileManagementApiGetUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(requestParameters: ProfileManagementApiGetUserProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllProfileAssignedForLocalTenantDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
         * @summary Remove an analytic tenant profile from administrating tenant users
         * @param {ProfileManagementApiRemoveAnalyticProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAnalyticProfile(requestParameters: ProfileManagementApiRemoveAnalyticProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessibleTenantProfileRevokeResponseDTO>> {
            const accessibleTenantProfileRevokeRequestDTO: AccessibleTenantProfileRevokeRequestDTO = {
                targetUserIds: requestParameters.targetUserIds,
                targetTenantCodes: requestParameters.targetTenantCodes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAnalyticProfile(requestParameters.profileId, accessibleTenantProfileRevokeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
         * @summary Remove a profile from a list of users
         * @param {ProfileManagementApiRemoveProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProfile(requestParameters: ProfileManagementApiRemoveProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalTenantProfileRevokeResponseDTO>> {
            const localTenantProfileRevokeRequestDTO: LocalTenantProfileRevokeRequestDTO = {
                targetUserIds: requestParameters.targetUserIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProfile(requestParameters.profileId, localTenantProfileRevokeRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileManagementApi - factory interface
 * @export
 */
export const ProfileManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileManagementApiFp(configuration)
    return {
        /**
         * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \"less than\" the current time (that is, in the past).
         * @summary Assign an analytic tenant profile to administrating tenant users
         * @param {ProfileManagementApiAssignAnalyticProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAnalyticProfile(requestParameters: ProfileManagementApiAssignAnalyticProfileRequest, options?: AxiosRequestConfig): AxiosPromise<AccessibleTenantProfileAssignmentResponseDTO> {
            return localVarFp.assignAnalyticProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
         * @summary Assign a profile to a list of users
         * @param {ProfileManagementApiAssignProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignProfile(requestParameters: ProfileManagementApiAssignProfileRequest, options?: AxiosRequestConfig): AxiosPromise<LocalTenantProfileAssignmentResponseDTO> {
            return localVarFp.assignProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
         * @summary Retrieve a list of all profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProfiles(options?: AxiosRequestConfig): AxiosPromise<ProfilesGetAPIResponseDTO> {
            return localVarFp.getAllProfiles(options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
         * @summary Retrieve the details of an analytic tenant profile
         * @param {ProfileManagementApiGetAnalyticProfileDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticProfileDetail(requestParameters: ProfileManagementApiGetAnalyticProfileDetailRequest, options?: AxiosRequestConfig): AxiosPromise<ProfileGetAPIResponseDTO> {
            return localVarFp.getAnalyticProfileDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve a list of analytic tenant profiles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticProfiles(options?: AxiosRequestConfig): AxiosPromise<ProfilesGetAPIResponseDTO> {
            return localVarFp.getAnalyticProfiles(options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles for analytic tenants.   Note: Administrating tenants only.
         * @summary Retrieve an administrating tenant user\'s analytic tenant profiles
         * @param {ProfileManagementApiGetAnalyticUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticUserProfile(requestParameters: ProfileManagementApiGetAnalyticUserProfileRequest, options?: AxiosRequestConfig): AxiosPromise<AllProfileAssignedForAccessibleTenantDTO> {
            return localVarFp.getAnalyticUserProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
         * @summary Retrieve the details of a profile
         * @param {ProfileManagementApiGetProfileDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileDetail(requestParameters: ProfileManagementApiGetProfileDetailRequest, options?: AxiosRequestConfig): AxiosPromise<ProfileGetAPIResponseDTO> {
            return localVarFp.getProfileDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve a specified user\'s assigned profiles. For administrating tenants,  this retrieves a user\'s administrating tenant profiles.
         * @summary Retrieve a user\'s profiles
         * @param {ProfileManagementApiGetUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(requestParameters: ProfileManagementApiGetUserProfileRequest, options?: AxiosRequestConfig): AxiosPromise<AllProfileAssignedForLocalTenantDTO> {
            return localVarFp.getUserProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
         * @summary Remove an analytic tenant profile from administrating tenant users
         * @param {ProfileManagementApiRemoveAnalyticProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAnalyticProfile(requestParameters: ProfileManagementApiRemoveAnalyticProfileRequest, options?: AxiosRequestConfig): AxiosPromise<AccessibleTenantProfileRevokeResponseDTO> {
            return localVarFp.removeAnalyticProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
         * @summary Remove a profile from a list of users
         * @param {ProfileManagementApiRemoveProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProfile(requestParameters: ProfileManagementApiRemoveProfileRequest, options?: AxiosRequestConfig): AxiosPromise<LocalTenantProfileRevokeResponseDTO> {
            return localVarFp.removeProfile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignAnalyticProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiAssignAnalyticProfileRequest
 */
export type ProfileManagementApiAssignAnalyticProfileRequest = {
    
    /**
    * The ID of the profile to assign.
    * @type {string}
    * @memberof ProfileManagementApiAssignAnalyticProfile
    */
    readonly profileId: string
    
} & AccessibleTenantProfileAssignmentRequestDTO

/**
 * Request parameters for assignProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiAssignProfileRequest
 */
export type ProfileManagementApiAssignProfileRequest = {
    
    /**
    * The ID of the profile to assign to a list of users.
    * @type {string}
    * @memberof ProfileManagementApiAssignProfile
    */
    readonly profileId: string
    
} & LocalTenantProfileAssignmentRequestDTO

/**
 * Request parameters for getAnalyticProfileDetail operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiGetAnalyticProfileDetailRequest
 */
export type ProfileManagementApiGetAnalyticProfileDetailRequest = {
    
    /**
    * The ID of the profile to retrieve details for.
    * @type {string}
    * @memberof ProfileManagementApiGetAnalyticProfileDetail
    */
    readonly profileId: string
    
}

/**
 * Request parameters for getAnalyticUserProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiGetAnalyticUserProfileRequest
 */
export type ProfileManagementApiGetAnalyticUserProfileRequest = {
    
    /**
    * The ID of the user you want to retrieve.
    * @type {string}
    * @memberof ProfileManagementApiGetAnalyticUserProfile
    */
    readonly userId: string
    
}

/**
 * Request parameters for getProfileDetail operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiGetProfileDetailRequest
 */
export type ProfileManagementApiGetProfileDetailRequest = {
    
    /**
    * The ID of the profile to retrieve details for.
    * @type {string}
    * @memberof ProfileManagementApiGetProfileDetail
    */
    readonly profileId: string
    
}

/**
 * Request parameters for getUserProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiGetUserProfileRequest
 */
export type ProfileManagementApiGetUserProfileRequest = {
    
    /**
    * The ID of the user you want to retrieve.
    * @type {string}
    * @memberof ProfileManagementApiGetUserProfile
    */
    readonly userId: string
    
}

/**
 * Request parameters for removeAnalyticProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiRemoveAnalyticProfileRequest
 */
export type ProfileManagementApiRemoveAnalyticProfileRequest = {
    
    /**
    * The ID of the profile to remove.
    * @type {string}
    * @memberof ProfileManagementApiRemoveAnalyticProfile
    */
    readonly profileId: string
    
} & AccessibleTenantProfileRevokeRequestDTO

/**
 * Request parameters for removeProfile operation in ProfileManagementApi.
 * @export
 * @interface ProfileManagementApiRemoveProfileRequest
 */
export type ProfileManagementApiRemoveProfileRequest = {
    
    /**
    * The ID of the profile to remove to a list of users.
    * @type {string}
    * @memberof ProfileManagementApiRemoveProfile
    */
    readonly profileId: string
    
} & LocalTenantProfileRevokeRequestDTO

/**
 * ProfileManagementApiGenerated - object-oriented interface
 * @export
 * @class ProfileManagementApiGenerated
 * @extends {BaseAPI}
 */
export class ProfileManagementApiGenerated extends BaseAPI {
    /**
     * This API allows you to assign an analytic tenant profile to a list of administrating tenant users  for a list of analytic tenants.   Note:   - Administrating tenants only.   - You can revoke a profile from a user with this request by updating the validityEndTime to be     \"less than\" the current time (that is, in the past).
     * @summary Assign an analytic tenant profile to administrating tenant users
     * @param {ProfileManagementApiAssignAnalyticProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public assignAnalyticProfile(requestParameters: ProfileManagementApiAssignAnalyticProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).assignAnalyticProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to assign a profile to a list of users. For administrating tenants,  this assigns an administrating tenant profile to a list of users.
     * @summary Assign a profile to a list of users
     * @param {ProfileManagementApiAssignProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public assignProfile(requestParameters: ProfileManagementApiAssignProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).assignProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to get a list of all available profiles. For administrating tenants,  this retrieves all administrating tenant profiles.
     * @summary Retrieve a list of all profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getAllProfiles(options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getAllProfiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to get the details of an analytic tenant profile.   Note: Administrating tenants only.
     * @summary Retrieve the details of an analytic tenant profile
     * @param {ProfileManagementApiGetAnalyticProfileDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getAnalyticProfileDetail(requestParameters: ProfileManagementApiGetAnalyticProfileDetailRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getAnalyticProfileDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve a list of profiles available for analytic tenants.   Note: Administrating tenants only.
     * @summary Retrieve a list of analytic tenant profiles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getAnalyticProfiles(options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getAnalyticProfiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve a specified user\'s assigned profiles for analytic tenants.   Note: Administrating tenants only.
     * @summary Retrieve an administrating tenant user\'s analytic tenant profiles
     * @param {ProfileManagementApiGetAnalyticUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getAnalyticUserProfile(requestParameters: ProfileManagementApiGetAnalyticUserProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getAnalyticUserProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to get the details of a specific profile. For administrating tenants, this retrieves  the details of administrating tenant profiles.
     * @summary Retrieve the details of a profile
     * @param {ProfileManagementApiGetProfileDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getProfileDetail(requestParameters: ProfileManagementApiGetProfileDetailRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getProfileDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve a specified user\'s assigned profiles. For administrating tenants,  this retrieves a user\'s administrating tenant profiles.
     * @summary Retrieve a user\'s profiles
     * @param {ProfileManagementApiGetUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public getUserProfile(requestParameters: ProfileManagementApiGetUserProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).getUserProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.   Note: Administrating tenants only.
     * @summary Remove an analytic tenant profile from administrating tenant users
     * @param {ProfileManagementApiRemoveAnalyticProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public removeAnalyticProfile(requestParameters: ProfileManagementApiRemoveAnalyticProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).removeAnalyticProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to remove a profile from a list of users. For administrating tenants, this  removes an administrating tenant profile from a list of users.
     * @summary Remove a profile from a list of users
     * @param {ProfileManagementApiRemoveProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileManagementApiGenerated
     */
    public removeProfile(requestParameters: ProfileManagementApiRemoveProfileRequest, options?: AxiosRequestConfig) {
        return ProfileManagementApiFp(this.configuration).removeProfile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
